{"version":3,"sources":["components/ContactList/ListElement/ListElement.module.css","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactList/ListElement/ListElement.jsx","components/ContactList/ContactList.jsx","App.js","index.js","components/ContactForm/ContactForm.module.css","components/Filter/Filter.module.css"],"names":["module","exports","ContactForm","newContactHandler","labelNameId","uuidv4","labelNumberId","inputNameProps","id","type","name","pattern","title","inputNumberProps","useState","setName","number","setNumber","handleInput","e","target","value","reset","className","s","contactForm","onSubmit","preventDefault","nameBlock","htmlFor","labelName","required","onChange","numberBlock","labelNumber","Filter","filterWord","filterHandler","filterInput","ListElement","deleteBtnName","deleteHandler","delete","onClick","ContactList","contactsList","map","App","contacts","setContacts","filter","setFilter","useEffect","localStorageData","localStorage","getItem","JSON","parse","setItem","stringify","newContact","item","toLowerCase","length","alert","prevState","includes","filteredContactList","contactId","resultedContactsList","contact","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fc832a65.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"delete\":\"ListElement_delete__3bvvN\"};","import { v4 as uuidv4 } from 'uuid';\r\nimport '../../App';\r\nimport { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport s from './ContactForm.module.css';\r\n\r\nconst ContactForm = ({ newContactHandler }) => {\r\n  const labelNameId = uuidv4();\r\n  const labelNumberId = uuidv4();\r\n\r\n  const inputNameProps = {\r\n    id: labelNameId,\r\n    type: 'text',\r\n    name: 'name',\r\n    pattern: \"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\",\r\n    title:\r\n      \"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\",\r\n  };\r\n\r\n  const inputNumberProps = {\r\n    id: labelNumberId,\r\n    type: 'tel',\r\n    name: 'number',\r\n    pattern:\r\n      '\\\\+?\\\\d{1,4}?[-.\\\\s]?\\\\(?\\\\d{1,3}?\\\\)?[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,9}',\r\n    title:\r\n      'Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +',\r\n  };\r\n\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n\r\n  const handleInput = e => {\r\n    const { value, name } = e.target;\r\n\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleFormSubmit = e => {\r\n    e.preventDefault();\r\n    newContactHandler({\r\n      id: uuidv4(),\r\n      name: name,\r\n      number: number,\r\n    });\r\n    reset();\r\n  };\r\n\r\n  const reset = () => {\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  return (\r\n    <form className={s.contactForm} onSubmit={handleFormSubmit}>\r\n      <div className={s.nameBlock}>\r\n        <label htmlFor={labelNameId} className={s.labelName}>\r\n          Name\r\n        </label>\r\n        <input\r\n          value={name}\r\n          required\r\n          {...inputNameProps}\r\n          onChange={handleInput}\r\n        />\r\n      </div>\r\n      <div className={s.numberBlock}>\r\n        <label htmlFor={labelNumberId} className={s.labelNumber}>\r\n          Number\r\n        </label>\r\n\r\n        <input\r\n          value={number}\r\n          required\r\n          {...inputNumberProps}\r\n          onChange={handleInput}\r\n        />\r\n      </div>\r\n      <button type=\"submit\">Add contact </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nContactForm.propTypes = {\r\n  newContactHandler: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactForm;\r\n","import PropTypes from 'prop-types';\r\nimport s from './Filter.module.css';\r\n\r\nconst Filter = ({ filterWord, filterHandler }) => {\r\n  return (\r\n    <div>\r\n      Find contacts by name\r\n      <input\r\n        className={s.filterInput}\r\n        type=\"text\"\r\n        value={filterWord}\r\n        onChange={filterHandler}\r\n      ></input>\r\n    </div>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  filterWord: PropTypes.string.isRequired,\r\n  filterHandler: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Filter;\r\n","import PropTypes from 'prop-types';\r\nimport s from './ListElement.module.css';\r\nconst ListElement = ({ name, number, deleteBtnName, deleteHandler }) => {\r\n  return (\r\n    <li>\r\n      {name}: {number}\r\n      <button\r\n        className={s.delete}\r\n        type=\"button\"\r\n        name={deleteBtnName}\r\n        onClick={deleteHandler}\r\n      >\r\n        Delete\r\n      </button>\r\n    </li>\r\n  );\r\n};\r\n\r\nListElement.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n  deleteBtnName: PropTypes.string.isRequired,\r\n  deleteHandler: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ListElement;\r\n","import ListElement from './ListElement';\r\n\r\nconst ContactList = ({ contactsList, deleteHandler }) => {\r\n  return (\r\n    <ul>\r\n      {contactsList.map(({ id, name, number }) => {\r\n        return (\r\n          <ListElement\r\n            key={id}\r\n            name={name}\r\n            number={number}\r\n            deleteBtnName={id}\r\n            deleteHandler={deleteHandler}\r\n          />\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default ContactList;\r\n","import { useState, useEffect } from 'react';\nimport ContactForm from './components/ContactForm';\nimport Filter from './components/Filter';\nimport ContactList from './components/ContactList';\nimport './App.css';\n\nconst App = () => {\n  const [contacts, setContacts] = useState([\n    { id: 'id-1', name: 'Chack Norris', number: '459-12-56' },\n    { id: 'id-2', name: 'Silvester Stallone', number: '443-89-12' },\n    { id: 'id-3', name: 'Jacky Chan', number: '645-17-79' },\n    { id: 'id-4', name: 'Arnold Schvartseneger', number: '227-91-26' },\n    { id: 'id-5', name: 'Bolo Yeng', number: '227-91-26' },\n  ]);\n\n  const [filter, setFilter] = useState('');\n\n  const filteredContactList = () => {\n    const filterWord = filter;\n    let result = [];\n    result = contacts.filter(item => {\n      return item.name.toLowerCase().includes(filterWord.toLowerCase());\n    });\n    return result;\n  };\n\n  const filterHandler = e => {\n    const { value } = e.target;\n    setFilter(value);\n  };\n\n  const addContact = newContact => {\n    const { name } = newContact;\n    const matchedContactsList = contacts.filter(item => {\n      return item.name.toLowerCase() === name.toLowerCase();\n    });\n\n    if (matchedContactsList.length !== 0) {\n      alert(`${name} is already in contacts.`);\n    } else {\n      setContacts(prevState => [...prevState, newContact]);\n    }\n  };\n\n  const deleteHandler = e => {\n    const { name: contactId } = e.target;\n    const resultedContactsList = contacts.filter(contact => {\n      return contact.id !== contactId;\n    });\n    setContacts(resultedContactsList);\n  };\n\n  useEffect(() => {\n    const localStorageData = localStorage.getItem('phoneBook');\n    if (localStorageData) {\n      setContacts(JSON.parse(localStorageData));\n    } else {\n      localStorage.setItem('phoneBook', JSON.stringify(contacts));\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('phoneBook', JSON.stringify(contacts));\n  }, [contacts]);\n\n  return (\n    <div className=\"App\">\n      <h1>Phonebook</h1>\n      <ContactForm newContactHandler={addContact} />\n\n      <h2>Contacts</h2>\n      <Filter filterWord={filter} filterHandler={filterHandler} />\n      <ContactList\n        contactsList={filteredContactList()}\n        deleteHandler={deleteHandler}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactForm\":\"ContactForm_contactForm__3P7IY\",\"labelName\":\"ContactForm_labelName__1R2bc\",\"labelNumber\":\"ContactForm_labelNumber__1wGcP\",\"nameBlock\":\"ContactForm_nameBlock__1giTt\",\"numberBlock\":\"ContactForm_numberBlock__2Gh6V\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterInput\":\"Filter_filterInput__3KwKu\"};"],"sourceRoot":""}