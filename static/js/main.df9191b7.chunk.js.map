{"version":3,"sources":["components/Filter/Filter.module.css","components/ContactList/ListElement/ListElement.module.css","components/ContactForm/ContactForm.module.css","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactList/ListElement/ListElement.jsx","components/ContactList/ContactList.jsx","App.js","index.js"],"names":["module","exports","ContactForm","labelNameId","uuidv4","labelNumberId","inputNameProps","id","type","name","pattern","title","inputNumberProps","state","number","handleInput","e","target","value","setState","handleFormSubmit","preventDefault","props","newContactHandler","reset","className","s","contactForm","onSubmit","this","nameBlock","htmlFor","labelName","required","onChange","numberBlock","labelNumber","Component","Filter","filterWord","filterHandler","filterInput","ListElement","deleteBtnName","deleteHandler","delete","onClick","ContactList","contactsList","map","App","contacts","filter","filteredContactList","item","toLowerCase","includes","addContact","newContact","length","alert","prevState","contactId","resultedContactsList","contact","console","log","localStorage","setItem","JSON","stringify","localStorageData","getItem","parse","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.df9191b7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterInput\":\"Filter_filterInput__3KwKu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"delete\":\"ListElement_delete__3bvvN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactForm\":\"ContactForm_contactForm__3P7IY\",\"labelName\":\"ContactForm_labelName__1R2bc\",\"labelNumber\":\"ContactForm_labelNumber__1wGcP\",\"nameBlock\":\"ContactForm_nameBlock__1giTt\",\"numberBlock\":\"ContactForm_numberBlock__2Gh6V\"};","import { v4 as uuidv4 } from 'uuid';\r\nimport '../../App';\r\nimport { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport s from './ContactForm.module.css';\r\n\r\nclass ContactForm extends Component {\r\n  labelNameId = uuidv4();\r\n  labelNumberId = uuidv4();\r\n\r\n  inputNameProps = {\r\n    id: this.labelNameId,\r\n    type: 'text',\r\n    name: 'name',\r\n    pattern: \"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\",\r\n    title:\r\n      \"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\",\r\n  };\r\n\r\n  inputNumberProps = {\r\n    id: this.labelNumberId,\r\n    type: 'tel',\r\n    name: 'number',\r\n    pattern:\r\n      '\\\\+?\\\\d{1,4}?[-.\\\\s]?\\\\(?\\\\d{1,3}?\\\\)?[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,9}',\r\n    title:\r\n      'Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +',\r\n  };\r\n\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  handleInput = e => {\r\n    const { value, name } = e.target;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleFormSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.newContactHandler({\r\n      id: uuidv4(),\r\n      name: this.state.name,\r\n      number: this.state.number,\r\n    });\r\n    this.reset();\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n  render() {\r\n    return (\r\n      <form className={s.contactForm} onSubmit={this.handleFormSubmit}>\r\n        <div className={s.nameBlock}>\r\n          <label htmlFor={this.labelNameId} className={s.labelName}>\r\n            Name\r\n          </label>\r\n          <input\r\n            value={this.state.name}\r\n            required\r\n            {...this.inputNameProps}\r\n            onChange={this.handleInput}\r\n          />\r\n        </div>\r\n        <div className={s.numberBlock}>\r\n          <label htmlFor={this.labelNumberId} className={s.labelNumber}>\r\n            Number\r\n          </label>\r\n\r\n          <input\r\n            value={this.state.number}\r\n            required\r\n            {...this.inputNumberProps}\r\n            onChange={this.handleInput}\r\n          />\r\n        </div>\r\n        <button type=\"submit\">Add contact </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nContactForm.propTypes = {\r\n  newContactHandler: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactForm;\r\n","import PropTypes from 'prop-types';\r\nimport s from './Filter.module.css';\r\n\r\nconst Filter = ({ filterWord, filterHandler }) => {\r\n  return (\r\n    <div>\r\n      Find contacts by name\r\n      <input\r\n        className={s.filterInput}\r\n        type=\"text\"\r\n        value={filterWord}\r\n        onChange={filterHandler}\r\n      ></input>\r\n    </div>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  filterWord: PropTypes.string.isRequired,\r\n  filterHandler: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Filter;\r\n","import PropTypes from 'prop-types';\r\nimport s from './ListElement.module.css';\r\nconst ListElement = ({ name, number, deleteBtnName, deleteHandler }) => {\r\n  return (\r\n    <li>\r\n      {name}: {number}\r\n      <button\r\n        className={s.delete}\r\n        type=\"button\"\r\n        name={deleteBtnName}\r\n        onClick={deleteHandler}\r\n      >\r\n        Delete\r\n      </button>\r\n    </li>\r\n  );\r\n};\r\n\r\nListElement.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n  deleteBtnName: PropTypes.string.isRequired,\r\n  deleteHandler: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ListElement;\r\n","import ListElement from './ListElement';\r\nconst ContactList = ({ contactsList, deleteHandler }) => {\r\n  return (\r\n    <ul>\r\n      {contactsList.map(({ id, name, number }) => {\r\n        return (\r\n          <ListElement\r\n            key={id}\r\n            name={name}\r\n            number={number}\r\n            deleteBtnName={id}\r\n            deleteHandler={deleteHandler}\r\n          />\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n};\r\nexport default ContactList;\r\n","import { Component } from 'react';\nimport ContactForm from './components/ContactForm';\nimport Filter from './components/Filter';\nimport ContactList from './components/ContactList';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    contacts: [\n      { id: 'id-1', name: 'Chack Norris', number: '459-12-56' },\n      { id: 'id-2', name: 'Silvester Stallone', number: '443-89-12' },\n      { id: 'id-3', name: 'Jacky Chan', number: '645-17-79' },\n      { id: 'id-4', name: 'Arnold Schvartseneger', number: '227-91-26' },\n      { id: 'id-5', name: 'Bolo Yeng', number: '227-91-26' },\n    ],\n    filter: '',\n  };\n\n  filteredContactList = () => {\n    const filterWord = this.state.filter;\n    let result = [];\n    result = this.state.contacts.filter(item => {\n      return item.name.toLowerCase().includes(filterWord.toLowerCase());\n    });\n    return result;\n  };\n\n  filterHandler = e => {\n    const { value } = e.target;\n    this.setState({ filter: value });\n  };\n\n  addContact = newContact => {\n    const { name } = newContact;\n    const matchedContactsList = this.state.contacts.filter(item => {\n      return item.name.toLowerCase() === name.toLowerCase();\n    });\n\n    matchedContactsList.length !== 0\n      ? alert(`${name} is already in contacts.`)\n      : this.setState(prevState => {\n          const result = [...prevState.contacts, newContact];\n          return { contacts: result };\n        });\n  };\n\n  deleteHandler = e => {\n    const { name: contactId } = e.target;\n    const resultedContactsList = this.state.contacts.filter(contact => {\n      return contact.id !== contactId;\n    });\n    this.setState({ contacts: resultedContactsList });\n  };\n\n  componentDidUpdate() {\n    console.log('-=DidUpdate=-');\n    this.setState(({ contacts }) => {\n      if (contacts !== this.setState['contacts']) {\n        localStorage.setItem('phoneBook', JSON.stringify(contacts));\n      }\n    });\n  }\n  componentDidMount() {\n    console.log('-=DidMount=-');\n    const localStorageData = localStorage.getItem('phoneBook');\n    if (localStorageData) {\n      this.setState({ contacts: JSON.parse(localStorageData) });\n    } else {\n      localStorage.setItem('phoneBook', JSON.stringify(this.state.contacts));\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Phonebook</h1>\n        <ContactForm newContactHandler={this.addContact} />\n\n        <h2>Contacts</h2>\n        <Filter\n          filterWord={this.state.filter}\n          filterHandler={this.filterHandler}\n        />\n        <ContactList\n          contactsList={this.filteredContactList()}\n          deleteHandler={this.deleteHandler}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}